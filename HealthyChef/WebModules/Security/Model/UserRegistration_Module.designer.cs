/*
    [template version: 2007.12.9]
    This file was generated by a tool--modifications will be overwritten if 
    this file is regenerated. Custom code should be added to 
    UserRegistration_Module.cs.
*/
using System;
using System.Web;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;

namespace BayshoreSolutions.WebModules.Cms.Security.Model
{
    partial class UserRegistration_Module
    {
        private static readonly DateTime _sqlMinDatetime = new DateTime(1900, 1, 1);

        public static readonly string TableName = "Security_UserRegistration_Module";
        public struct Columns
        {
            public static readonly string ModuleId = @"ModuleId";
            public static readonly string ConfirmationPageNavigationId = @"ConfirmationPageNavigationId";
            public static readonly string NotifyEmailAddress = @"NotifyEmailAddress";
        }

        #region Properties
        private bool _isNew = true;
        /// <summary>
        /// Indicates whether the entity has been saved at least once.
        /// </summary>
        public bool IsNew
        {
            get { return _isNew; }
        }
        private bool _isDirty = false;
        /// <summary>
        /// Indicates whether the entity has been modified since the last save.
        /// </summary>
        public bool IsDirty
        {
            get { return _isDirty; }
        }
        private int _moduleId;
        ///<summary>The unique entity key.</summary>
        public int ModuleId
        {
            get { return _moduleId; }
            set { _moduleId = value; _isDirty = true; }
        }
        private int _confirmationPageNavigationId;
        public int ConfirmationPageNavigationId
        {
            get { return _confirmationPageNavigationId; }
            set { _confirmationPageNavigationId = value; _isDirty = true; }
        }
        private string _notifyEmailAddress;
        public string NotifyEmailAddress
        {
            get { return _notifyEmailAddress; }
            set { _notifyEmailAddress = value; _isDirty = true; }
        }
        #endregion

        //#region Foreign-key properties
        ///// <summary>
        ///// Gets the WebModules_Module entity related to this UserRegistration_Module.
        ///// </summary>
        //public BayshoreSolutions.WebModules.Cms.Security.Model.WebModules_Module WebModules_Module
        //{
        //    get 
        //    {
        //        
        //        return BayshoreSolutions.WebModules.Cms.Security.Model.WebModules_Module.Get(this.ModuleId);
        //    }
        //}
        //#endregion

        public event System.EventHandler PreSave;
        private void OnPreSave()
        {
            if (null != PreSave)
                PreSave(this, null);
        }

        public event System.EventHandler PostSave;
        private void OnPostSave()
        {
            if (null != PostSave)
                PostSave(this, null);
        }

        public override string ToString()
        {
            return "UserRegistration_Module"
                + "/" + this.ModuleId
                ;
        }

        /// <summary>
        /// Gets a human-readable text representation of the current entity.
        /// </summary>
        public string Inspect()
        {
            return
                "UserRegistration_Module" + Environment.NewLine
                + "------------------------------" + Environment.NewLine
                + "ConfirmationPageNavigationId: " + this.ConfirmationPageNavigationId + Environment.NewLine
                + "NotifyEmailAddress: " + this.NotifyEmailAddress + Environment.NewLine
                ;
        }

        /// <summary>
        /// Gets a unique cache key for the specified entity.
        /// </summary>
        private static string GetCacheKey(
            int moduleId
        )
        {
            return typeof(UserRegistration_Module).FullName
                + "/" + moduleId;
        }

        /// <summary>
        /// Removes the specified entity from the context cache.
        /// </summary>
        private static void RemoveFromContextCache(
            int moduleId
        )
        {
            HttpContext context = HttpContext.Current;
            if (null != context) //may be null in a non-web environment (e.g., unit tests).
            {
                context.Items.Remove(GetCacheKey(
                    moduleId
                    ));
            }
        }

        private static SqlCommand GetSqlCommand(string spName, bool createConnection)
        {
            SqlCommand cmd = new SqlCommand(spName);
            cmd.CommandType = CommandType.StoredProcedure;
            if (createConnection)
            {
                cmd.Connection = new SqlConnection(_connectionString);
            }
            return cmd;
        }

        //internal destroy function
        private static void Destroy_(
            int moduleId
        )
        {
            using (SqlCommand cmd = GetSqlCommand("Security_UserRegistration_Module_Destroy", true))
            {
                cmd.Parameters.AddWithValue("@ModuleId", moduleId);
                using (cmd.Connection)
                {
                    cmd.Connection.Open();
                    cmd.ExecuteNonQuery();
                }
            }

            RemoveFromContextCache(
                moduleId
                );
        }

        /// <summary>Saves the entity to the information store.</summary>
        private static int Save_(UserRegistration_Module entity)
        {
            int retval = 0;

            entity.OnPreSave();

            using (SqlCommand cmd = entity.GetSaveCommand(true))
            {
                using (cmd.Connection)
                {
                    cmd.Connection.Open();
                    cmd.ExecuteNonQuery();
                }
                entity._isNew = false;


                //Note: it is _not_ necessary to call RemoveFromContextCache()
                //during Save, because the object being saved is the same object 
                //referenced by the context cache--hence, it is up-to-date.

                retval = (int)cmd.Parameters["@RETVAL"].Value;
            }

            entity.OnPostSave();

            return retval;
        }

        public SqlCommand GetSaveCommand()
        {
            return GetSaveCommand(false);
        }

        public SqlCommand GetSaveCommand(bool createConnection)
        {
            SqlCommand cmd = GetSqlCommand("Security_UserRegistration_Module_Save", createConnection);
            cmd.Parameters.Add("@RETVAL", SqlDbType.Int).Direction = ParameterDirection.ReturnValue;
            cmd.Parameters.AddWithValue("@ModuleId", this.ModuleId);
            cmd.Parameters.AddWithValue("@ConfirmationPageNavigationId", this.ConfirmationPageNavigationId);
            cmd.Parameters.AddWithValue("@NotifyEmailAddress", this.NotifyEmailAddress);
            return cmd;
        }

        /// <summary>
        /// Gets the specified entity from the information store.
        /// The first call to this function caches the result in the HTTP context (if available); 
        /// subsequent calls during the same HTTP context will retrieve the item from the context 
        /// instead of the database.
        /// </summary>
        public static UserRegistration_Module Get(
            int moduleId
        )
        {
            UserRegistration_Module item = null;
            string cacheKey = GetCacheKey(
                    moduleId
                );
            HttpContext context = HttpContext.Current;
            if (null != context) //may be null in a non-web environment (e.g., unit tests).
            { //try the cache of the current HTTP request.
                item = context.Items[cacheKey] as UserRegistration_Module;
            }
            if (null == item)
            {
                item = Find(
                    moduleId,
                    null,
                    null).First;

                if (null != context)
                { //cache the item.
                    context.Items[cacheKey] = item;
                }
            }

            return item;
        }

        /// <summary>Gets all of the entities from the information store.</summary>
        public static UserRegistration_ModuleCollection Get()
        {
            return Find(
                null,
                null,
                null
            );
        }

        public static UserRegistration_ModuleCollection Get(
            int? pageIndex,
            int? pageSize,
            string sortColumn,
            bool? sortDirection)
        {
            return Find(
                null,
                null,
                null,
                pageIndex,
                pageSize,
                sortColumn,
                sortDirection
            );
        }

        /// <summary>Gets all of the entities from the information store.</summary>
        public static SqlDataReader GetReader()
        {
            return FindReader(
                null,
                null,
                null
            );
        }

        public static SqlDataReader GetReader(
            int? pageIndex,
            int? pageSize,
            string sortColumn,
            bool? sortDirection)
        {
            return FindReader(
                null,
                null,
                null,
                pageIndex,
                pageSize,
                sortColumn,
                sortDirection
            );
        }

        /// <summary>
        /// Reads a set from the information store filtered by the specified parameters. 
        /// Ignores null parameters.
        /// </summary>
        public static UserRegistration_ModuleCollection Find(
            int? moduleId,
            int? confirmationPageNavigationId,
            string notifyEmailAddress)
        {
            return Find(
                moduleId,
                confirmationPageNavigationId,
                notifyEmailAddress,
                null,
                null,
                null,
                null);
        }

        /// <param name="sortDirection">true: ascending; false: descending</param>
        public static UserRegistration_ModuleCollection Find(
            int? moduleId,
            int? confirmationPageNavigationId,
            string notifyEmailAddress,
            int? pageIndex,
            int? pageSize,
            string sortColumn,
            bool? sortDirection)
        {
            using (SqlDataReader r = FindReader(
                moduleId,
                confirmationPageNavigationId,
                notifyEmailAddress,
                pageIndex,
                pageSize,
                sortColumn,
                sortDirection
                ))
            {
                return GetTypedList(r);
            }
        }

        /// <summary>
        /// Reads a set from the information store filtered by the specified parameters. 
        /// Ignores null parameters.
        /// </summary>
        public static SqlDataReader FindReader(
            int? moduleId,
            int? confirmationPageNavigationId,
            string notifyEmailAddress)
        {
            return FindReader(
                moduleId,
                confirmationPageNavigationId,
                notifyEmailAddress,
                null,
                null,
                null,
                null);
        }

        /// <param name="sortDirection">true: ascending; false: descending</param>
        public static SqlDataReader FindReader(
            int? moduleId,
            int? confirmationPageNavigationId,
            string notifyEmailAddress,
            int? pageIndex,
            int? pageSize,
            string sortColumn,
            bool? sortDirection)
        {
            if (pageIndex.HasValue && pageIndex < 1) throw new IndexOutOfRangeException("pageIndex must be null or greater than zero.");
            if (pageSize.HasValue && pageSize < 1) throw new ArgumentOutOfRangeException("pageSize must be null or greater than zero.");

            string sortDirectionString =
                (sortDirection.HasValue && !sortDirection.Value) ? "desc" : "asc"; //default to asc

            SqlCommand cmd = null;
            try
            {
                cmd = GetSqlCommand("Security_UserRegistration_Module_Get", true);

                cmd.Parameters.AddWithValue("@ModuleId", moduleId);
                cmd.Parameters.AddWithValue("@ConfirmationPageNavigationId", confirmationPageNavigationId);
                cmd.Parameters.AddWithValue("@NotifyEmailAddress", notifyEmailAddress);

                //paging
                if (pageIndex.HasValue && pageSize.HasValue)
                {
                    cmd.Parameters.AddWithValue("@PageIndex", pageIndex);
                    cmd.Parameters.AddWithValue("@PageSize", pageSize);
                }

                //sorting
                if (!string.IsNullOrEmpty(sortColumn))
                {
                    cmd.Parameters.AddWithValue("@SortBy", sortColumn);
                    cmd.Parameters.AddWithValue("@SortDir", sortDirectionString);
                }

                cmd.Connection.Open();

                return cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
            catch
            {
                if (null != cmd)
                {
                    if (null != cmd.Connection)
                        cmd.Connection.Dispose();

                    cmd.Dispose();
                }

                throw;
            }
        }

        public static UserRegistration_ModuleCollection GetTypedList(SqlDataReader r)
        {
            UserRegistration_ModuleCollection items = new UserRegistration_ModuleCollection();
            UserRegistration_Module item = null;
            while (r.Read())
            {
                item = new UserRegistration_Module();
                item.ModuleId = r.GetInt32(r.GetOrdinal("ModuleId"));
                item.ConfirmationPageNavigationId = r.GetInt32(r.GetOrdinal("ConfirmationPageNavigationId"));
                item.NotifyEmailAddress = r[r.GetOrdinal("NotifyEmailAddress")] as string;
                item._isNew = false;
                items.Add(item);
            }
            return items;
        }
    }

    partial class UserRegistration_ModuleCollection : List<UserRegistration_Module>
    {
        public UserRegistration_Module First
        {
            get { return (this.Count == 0) ? null : this[0]; }
        }
    }
}
